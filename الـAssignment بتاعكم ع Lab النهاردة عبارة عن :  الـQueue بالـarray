#include <iostream>

const int kQueueSize = 10;

class Queue {
 public:
  Queue() : head_(0), tail_(0) {}

 
  void push(int x) {
    if (full()) {
      throw std::overflow_error("Queue is full.");
    }
    data_[tail_] = x;
    tail_ = (tail_ + 1) % kQueueSize;
  }

  
  int pop() {
    if (empty()) {
      throw std::underflow_error("Queue is empty.");
    }
    int front = data_[head_];
    head_ = (head_ + 1) % kQueueSize;
    return front;
  }


  int front() {
    if (empty()) {
      throw std::underflow_error("Queue is empty.");
    }
    return data_[head_];
  }

  bool empty() { return head_ == tail_; }

  bool full() { return (tail_ + 1) % kQueueSize == head_; }

 private:
  int data_[kQueueSize];
  int head_;
  int tail_;
};

int main() {
  Queue queue;
  queue.push(1);
  queue.push(2);
  queue.push(3);
  std::cout << queue.front() << std::endl;  // Outputs 1
  std::cout << queue.pop() << std::endl;  // Outputs 1
  std::cout << queue.front() << std::endl;  // Outputs 2
  std::cout << queue.empty() << std::endl;  // Outputs false
  std::cout << queue.pop() << std::endl;  // Outputs 2
  std::cout << queue.pop() << std::endl;  // Outputs 3
  std::cout << queue.empty() << std::endl;  // Outputs true
  return 0;
}
